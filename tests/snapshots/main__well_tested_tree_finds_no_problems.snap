---
source: tests/main.rs
expression: stdout
snapshot_kind: text
---
Found 96 mutants to test
ok       Unmutated baseline
caught   src/arc.rs:4:5: replace return_arc -> Arc<String> with Arc::new(String::new())
caught   src/arc.rs:4:5: replace return_arc -> Arc<String> with Arc::new("xyzzy".into())
caught   src/booleans.rs:2:5: replace and -> bool with true
caught   src/booleans.rs:2:5: replace and -> bool with false
caught   src/booleans.rs:2:7: replace && with || in and
caught   src/booleans.rs:6:5: replace or -> bool with true
caught   src/booleans.rs:6:5: replace or -> bool with false
caught   src/booleans.rs:6:7: replace || with && in or
caught   src/booleans.rs:10:5: replace xor -> bool with true
caught   src/booleans.rs:10:5: replace xor -> bool with false
caught   src/booleans.rs:10:7: replace ^ with | in xor
caught   src/booleans.rs:10:7: replace ^ with & in xor
caught   src/booleans.rs:14:5: replace not -> bool with true
caught   src/booleans.rs:14:5: replace not -> bool with false
caught   src/booleans.rs:14:5: delete ! in not
caught   src/inside_mod.rs:4:13: replace outer::inner::name -> &'static str with ""
caught   src/inside_mod.rs:4:13: replace outer::inner::name -> &'static str with "xyzzy"
caught   src/methods.rs:17:9: replace Foo::double with ()
caught   src/methods.rs:17:16: replace *= with += in Foo::double
caught   src/methods.rs:17:16: replace *= with /= in Foo::double
caught   src/methods.rs:23:9: replace <impl fmt::Display for Foo>::fmt -> fmt::Result with Ok(Default::default())
caught   src/methods.rs:29:9: replace <impl fmt::Debug for &Foo>::fmt -> fmt::Result with Ok(Default::default())
caught   src/nested_function.rs:2:5: replace has_nested -> u32 with 0
caught   src/nested_function.rs:2:5: replace has_nested -> u32 with 1
caught   src/nested_function.rs:3:9: replace has_nested::inner -> u32 with 0
caught   src/nested_function.rs:3:9: replace has_nested::inner -> u32 with 1
caught   src/nested_function.rs:5:13: replace * with + in has_nested
caught   src/nested_function.rs:5:13: replace * with / in has_nested
caught   src/numbers.rs:2:5: replace double_float -> f32 with 0.0
caught   src/numbers.rs:2:5: replace double_float -> f32 with 1.0
caught   src/numbers.rs:2:5: replace double_float -> f32 with -1.0
caught   src/numbers.rs:2:9: replace * with + in double_float
caught   src/numbers.rs:2:9: replace * with / in double_float
caught   src/numbers.rs:6:5: replace is_double -> bool with true
caught   src/numbers.rs:6:5: replace is_double -> bool with false
caught   src/numbers.rs:6:7: replace == with != in is_double
caught   src/numbers.rs:6:12: replace * with + in is_double
caught   src/numbers.rs:6:12: replace * with / in is_double
caught   src/numbers.rs:10:5: replace negate_i32 -> i32 with 0
caught   src/numbers.rs:10:5: replace negate_i32 -> i32 with 1
caught   src/numbers.rs:10:5: replace negate_i32 -> i32 with -1
caught   src/numbers.rs:10:5: delete - in negate_i32
caught   src/numbers.rs:14:5: replace negate_f32 -> f32 with 0.0
caught   src/numbers.rs:14:5: replace negate_f32 -> f32 with 1.0
caught   src/numbers.rs:14:5: replace negate_f32 -> f32 with -1.0
caught   src/numbers.rs:14:5: delete - in negate_f32
caught   src/numbers.rs:18:5: replace bitwise_not_i32 -> i32 with 0
caught   src/numbers.rs:18:5: replace bitwise_not_i32 -> i32 with 1
caught   src/numbers.rs:18:5: replace bitwise_not_i32 -> i32 with -1
caught   src/numbers.rs:18:5: delete ! in bitwise_not_i32
caught   src/numbers.rs:22:5: replace bitwise_not_u32 -> u32 with 0
caught   src/numbers.rs:22:5: replace bitwise_not_u32 -> u32 with 1
caught   src/numbers.rs:22:5: delete ! in bitwise_not_u32
caught   src/result.rs:6:5: replace simple_result -> Result<&'static str, ()> with Ok("")
caught   src/result.rs:6:5: replace simple_result -> Result<&'static str, ()> with Ok("xyzzy")
caught   src/result.rs:10:5: replace error_if_negative -> Result<(), ()> with Ok(())
caught   src/result.rs:10:10: replace < with == in error_if_negative
caught   src/result.rs:10:10: replace < with > in error_if_negative
caught   src/result.rs:10:10: replace < with <= in error_if_negative
caught   src/result.rs:18:5: replace result_with_no_apparent_type_args -> std::fmt::Result with Ok(Default::default())
caught   src/sets.rs:4:5: replace make_a_set -> BTreeSet<String> with BTreeSet::new()
caught   src/sets.rs:4:5: replace make_a_set -> BTreeSet<String> with BTreeSet::from_iter([String::new()])
caught   src/sets.rs:4:5: replace make_a_set -> BTreeSet<String> with BTreeSet::from_iter(["xyzzy".into()])
caught   src/simple_fns.rs:8:5: replace returns_unit with ()
caught   src/simple_fns.rs:8:8: replace += with -= in returns_unit
caught   src/simple_fns.rs:8:8: replace += with *= in returns_unit
caught   src/simple_fns.rs:13:5: replace returns_42u32 -> u32 with 0
caught   src/simple_fns.rs:13:5: replace returns_42u32 -> u32 with 1
caught   src/simple_fns.rs:18:5: replace divisible_by_three -> bool with true
caught   src/simple_fns.rs:18:5: replace divisible_by_three -> bool with false
caught   src/simple_fns.rs:18:11: replace == with != in divisible_by_three
caught   src/simple_fns.rs:18:7: replace % with / in divisible_by_three
caught   src/simple_fns.rs:18:7: replace % with + in divisible_by_three
caught   src/simple_fns.rs:27:5: replace double_string -> String with String::new()
caught   src/simple_fns.rs:27:5: replace double_string -> String with "xyzzy".into()
caught   src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(Vec::new())
caught   src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Borrowed("")])
caught   src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Owned("".to_owned())])
caught   src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Borrowed("xyzzy")])
caught   src/slices.rs:4:5: replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Owned("xyzzy".to_owned())])
caught   src/slices.rs:5:20: replace < with == in pad
caught   src/slices.rs:5:20: replace < with > in pad
caught   src/slices.rs:5:20: replace < with <= in pad
caught   src/slices.rs:13:5: replace return_mut_slice -> &mut[usize] with Vec::leak(Vec::new())
caught   src/slices.rs:13:5: replace return_mut_slice -> &mut[usize] with Vec::leak(vec![0])
caught   src/slices.rs:13:5: replace return_mut_slice -> &mut[usize] with Vec::leak(vec![1])
caught   src/slices.rs:14:12: replace *= with += in return_mut_slice
caught   src/slices.rs:14:12: replace *= with /= in return_mut_slice
caught   src/static_item.rs:1:33: replace == with !=
caught   src/static_item.rs:1:39: replace + with -
caught   src/static_item.rs:1:39: replace + with *
caught   src/struct_with_lifetime.rs:15:9: replace Lex<'buf>::buf_len -> usize with 0
caught   src/struct_with_lifetime.rs:15:9: replace Lex<'buf>::buf_len -> usize with 1
caught   src/traits.rs:5:9: replace Something::is_three -> bool with true
caught   src/traits.rs:5:9: replace Something::is_three -> bool with false
caught   src/traits.rs:5:11: replace == with != in Something::is_three
96 mutants tested: 96 caught
