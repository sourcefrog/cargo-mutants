---
source: tests/util/mod.rs
assertion_line: 69
expression: "String::from_utf8_lossy(&output.stdout)"

---
[
  {
    "diff": "--- src/arc.rs\n+++ replace return_arc -> Arc<String> with Arc::new(String::new())\n@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n fn return_arc() -> Arc<String> {\n-    Arc::new(String::from(\"hello!\"))\n+    Arc::new(String::new()) /* ~ changed by cargo-mutants ~ */\n }\n \n #[test]\n fn returns_hello() {\n     assert_eq!(return_arc().as_ref(), \"hello!\");\n }\n",
    "file": "src/arc.rs",
    "function": {
      "function_name": "return_arc",
      "return_type": "-> Arc<String>",
      "span": {
        "end": {
          "column": 2,
          "line": 5
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Arc::new(String::new())",
    "span": {
      "end": {
        "column": 37,
        "line": 4
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/arc.rs\n+++ replace return_arc -> Arc<String> with Arc::new(\"xyzzy\".into())\n@@ -1,10 +1,10 @@\n use std::sync::Arc;\n \n fn return_arc() -> Arc<String> {\n-    Arc::new(String::from(\"hello!\"))\n+    Arc::new(\"xyzzy\".into()) /* ~ changed by cargo-mutants ~ */\n }\n \n #[test]\n fn returns_hello() {\n     assert_eq!(return_arc().as_ref(), \"hello!\");\n }\n",
    "file": "src/arc.rs",
    "function": {
      "function_name": "return_arc",
      "return_type": "-> Arc<String>",
      "span": {
        "end": {
          "column": 2,
          "line": 5
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Arc::new(\"xyzzy\".into())",
    "span": {
      "end": {
        "column": 37,
        "line": 4
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace and -> bool with true\n@@ -1,10 +1,10 @@\n fn and(a: bool, b: bool) -> bool {\n-    a && b\n+    true /* ~ changed by cargo-mutants ~ */\n }\n \n fn or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "and",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "true",
    "span": {
      "end": {
        "column": 11,
        "line": 2
      },
      "start": {
        "column": 5,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace and -> bool with false\n@@ -1,10 +1,10 @@\n fn and(a: bool, b: bool) -> bool {\n-    a && b\n+    false /* ~ changed by cargo-mutants ~ */\n }\n \n fn or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "and",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "false",
    "span": {
      "end": {
        "column": 11,
        "line": 2
      },
      "start": {
        "column": 5,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace && with || in and\n@@ -1,10 +1,10 @@\n fn and(a: bool, b: bool) -> bool {\n-    a && b\n+    a || /* ~ changed by cargo-mutants ~ */ b\n }\n \n fn or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "and",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "||",
    "span": {
      "end": {
        "column": 9,
        "line": 2
      },
      "start": {
        "column": 7,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace or -> bool with true\n@@ -1,14 +1,14 @@\n fn and(a: bool, b: bool) -> bool {\n     a && b\n }\n \n fn or(a: bool, b: bool) -> bool {\n-    a || b\n+    true /* ~ changed by cargo-mutants ~ */\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n }\n \n fn not(a: bool) -> bool {\n     !a\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "or",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "true",
    "span": {
      "end": {
        "column": 11,
        "line": 6
      },
      "start": {
        "column": 5,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace or -> bool with false\n@@ -1,14 +1,14 @@\n fn and(a: bool, b: bool) -> bool {\n     a && b\n }\n \n fn or(a: bool, b: bool) -> bool {\n-    a || b\n+    false /* ~ changed by cargo-mutants ~ */\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n }\n \n fn not(a: bool) -> bool {\n     !a\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "or",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "false",
    "span": {
      "end": {
        "column": 11,
        "line": 6
      },
      "start": {
        "column": 5,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace || with && in or\n@@ -1,14 +1,14 @@\n fn and(a: bool, b: bool) -> bool {\n     a && b\n }\n \n fn or(a: bool, b: bool) -> bool {\n-    a || b\n+    a && /* ~ changed by cargo-mutants ~ */ b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n }\n \n fn not(a: bool) -> bool {\n     !a\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "or",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "&&",
    "span": {
      "end": {
        "column": 9,
        "line": 6
      },
      "start": {
        "column": 7,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace xor -> bool with true\n@@ -2,17 +2,17 @@\n     a && b\n }\n \n fn or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n-    a ^ b\n+    true /* ~ changed by cargo-mutants ~ */\n }\n \n fn not(a: bool) -> bool {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "xor",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "true",
    "span": {
      "end": {
        "column": 10,
        "line": 10
      },
      "start": {
        "column": 5,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace xor -> bool with false\n@@ -2,17 +2,17 @@\n     a && b\n }\n \n fn or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n-    a ^ b\n+    false /* ~ changed by cargo-mutants ~ */\n }\n \n fn not(a: bool) -> bool {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "xor",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "false",
    "span": {
      "end": {
        "column": 10,
        "line": 10
      },
      "start": {
        "column": 5,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace ^ with | in xor\n@@ -2,17 +2,17 @@\n     a && b\n }\n \n fn or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n-    a ^ b\n+    a | /* ~ changed by cargo-mutants ~ */ b\n }\n \n fn not(a: bool) -> bool {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "xor",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "|",
    "span": {
      "end": {
        "column": 8,
        "line": 10
      },
      "start": {
        "column": 7,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace ^ with & in xor\n@@ -2,17 +2,17 @@\n     a && b\n }\n \n fn or(a: bool, b: bool) -> bool {\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n-    a ^ b\n+    a & /* ~ changed by cargo-mutants ~ */ b\n }\n \n fn not(a: bool) -> bool {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "xor",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "&",
    "span": {
      "end": {
        "column": 8,
        "line": 10
      },
      "start": {
        "column": 7,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace not -> bool with true\n@@ -6,17 +6,17 @@\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n }\n \n fn not(a: bool) -> bool {\n-    !a\n+    true /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     #[test]\n     fn all_and() {\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "not",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 13
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "true",
    "span": {
      "end": {
        "column": 7,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ replace not -> bool with false\n@@ -6,17 +6,17 @@\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n }\n \n fn not(a: bool) -> bool {\n-    !a\n+    false /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     #[test]\n     fn all_and() {\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "not",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 13
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "false",
    "span": {
      "end": {
        "column": 7,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/booleans.rs\n+++ delete ! in not\n@@ -6,17 +6,17 @@\n     a || b\n }\n \n fn xor(a: bool, b: bool) -> bool {\n     a ^ b\n }\n \n fn not(a: bool) -> bool {\n-    !a\n+     /* ~ changed by cargo-mutants ~ */a\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     #[test]\n     fn all_and() {\n",
    "file": "src/booleans.rs",
    "function": {
      "function_name": "not",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 13
        }
      }
    },
    "genre": "UnaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "",
    "span": {
      "end": {
        "column": 6,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/inside_mod.rs\n+++ replace outer::inner::name -> &'static str with \"\"\n@@ -1,12 +1,12 @@\n mod outer {\n     mod inner {\n         pub fn name() -> &'static str {\n-            \"Bob\"\n+            \"\" /* ~ changed by cargo-mutants ~ */\n         }\n \n         #[test]\n         fn test_name() {\n             assert_eq!(name(), \"Bob\");\n         }\n     }\n }\n",
    "file": "src/inside_mod.rs",
    "function": {
      "function_name": "outer::inner::name",
      "return_type": "-> &'static str",
      "span": {
        "end": {
          "column": 10,
          "line": 5
        },
        "start": {
          "column": 9,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "\"\"",
    "span": {
      "end": {
        "column": 18,
        "line": 4
      },
      "start": {
        "column": 13,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/inside_mod.rs\n+++ replace outer::inner::name -> &'static str with \"xyzzy\"\n@@ -1,12 +1,12 @@\n mod outer {\n     mod inner {\n         pub fn name() -> &'static str {\n-            \"Bob\"\n+            \"xyzzy\" /* ~ changed by cargo-mutants ~ */\n         }\n \n         #[test]\n         fn test_name() {\n             assert_eq!(name(), \"Bob\");\n         }\n     }\n }\n",
    "file": "src/inside_mod.rs",
    "function": {
      "function_name": "outer::inner::name",
      "return_type": "-> &'static str",
      "span": {
        "end": {
          "column": 10,
          "line": 5
        },
        "start": {
          "column": 9,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "\"xyzzy\"",
    "span": {
      "end": {
        "column": 18,
        "line": 4
      },
      "start": {
        "column": 13,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/methods.rs\n+++ replace Foo::double with ()\n@@ -9,17 +9,17 @@\n }\n \n impl Foo {\n     pub fn new() -> Foo {\n         Foo { i: 32 }\n     }\n \n     pub fn double(&mut self) {\n-        self.i *= 2;\n+        () /* ~ changed by cargo-mutants ~ */\n     }\n }\n \n impl fmt::Display for Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Foo {}\", self.i)\n     }\n }\n",
    "file": "src/methods.rs",
    "function": {
      "function_name": "Foo::double",
      "return_type": "",
      "span": {
        "end": {
          "column": 6,
          "line": 18
        },
        "start": {
          "column": 5,
          "line": 16
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "()",
    "span": {
      "end": {
        "column": 21,
        "line": 17
      },
      "start": {
        "column": 9,
        "line": 17
      }
    }
  },
  {
    "diff": "--- src/methods.rs\n+++ replace *= with += in Foo::double\n@@ -9,17 +9,17 @@\n }\n \n impl Foo {\n     pub fn new() -> Foo {\n         Foo { i: 32 }\n     }\n \n     pub fn double(&mut self) {\n-        self.i *= 2;\n+        self.i += /* ~ changed by cargo-mutants ~ */ 2;\n     }\n }\n \n impl fmt::Display for Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Foo {}\", self.i)\n     }\n }\n",
    "file": "src/methods.rs",
    "function": {
      "function_name": "Foo::double",
      "return_type": "",
      "span": {
        "end": {
          "column": 6,
          "line": 18
        },
        "start": {
          "column": 5,
          "line": 16
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "+=",
    "span": {
      "end": {
        "column": 18,
        "line": 17
      },
      "start": {
        "column": 16,
        "line": 17
      }
    }
  },
  {
    "diff": "--- src/methods.rs\n+++ replace *= with /= in Foo::double\n@@ -9,17 +9,17 @@\n }\n \n impl Foo {\n     pub fn new() -> Foo {\n         Foo { i: 32 }\n     }\n \n     pub fn double(&mut self) {\n-        self.i *= 2;\n+        self.i /= /* ~ changed by cargo-mutants ~ */ 2;\n     }\n }\n \n impl fmt::Display for Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Foo {}\", self.i)\n     }\n }\n",
    "file": "src/methods.rs",
    "function": {
      "function_name": "Foo::double",
      "return_type": "",
      "span": {
        "end": {
          "column": 6,
          "line": 18
        },
        "start": {
          "column": 5,
          "line": 16
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "/=",
    "span": {
      "end": {
        "column": 18,
        "line": 17
      },
      "start": {
        "column": 16,
        "line": 17
      }
    }
  },
  {
    "diff": "--- src/methods.rs\n+++ replace <impl fmt::Display for Foo>::fmt -> fmt::Result with Ok(Default::default())\n@@ -15,17 +15,17 @@\n \n     pub fn double(&mut self) {\n         self.i *= 2;\n     }\n }\n \n impl fmt::Display for Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Foo {}\", self.i)\n+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */\n     }\n }\n \n impl fmt::Debug for &Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"&Foo {}\", self.i)\n     }\n }\n",
    "file": "src/methods.rs",
    "function": {
      "function_name": "<impl fmt::Display for Foo>::fmt",
      "return_type": "-> fmt::Result",
      "span": {
        "end": {
          "column": 6,
          "line": 24
        },
        "start": {
          "column": 5,
          "line": 22
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Ok(Default::default())",
    "span": {
      "end": {
        "column": 36,
        "line": 23
      },
      "start": {
        "column": 9,
        "line": 23
      }
    }
  },
  {
    "diff": "--- src/methods.rs\n+++ replace <impl fmt::Debug for &Foo>::fmt -> fmt::Result with Ok(Default::default())\n@@ -21,17 +21,17 @@\n impl fmt::Display for Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Foo {}\", self.i)\n     }\n }\n \n impl fmt::Debug for &Foo {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"&Foo {}\", self.i)\n+        Ok(Default::default()) /* ~ changed by cargo-mutants ~ */\n     }\n }\n \n impl Default for Foo {\n     fn default() -> Self {\n         Foo::new()\n     }\n }\n",
    "file": "src/methods.rs",
    "function": {
      "function_name": "<impl fmt::Debug for &Foo>::fmt",
      "return_type": "-> fmt::Result",
      "span": {
        "end": {
          "column": 6,
          "line": 30
        },
        "start": {
          "column": 5,
          "line": 28
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Ok(Default::default())",
    "span": {
      "end": {
        "column": 37,
        "line": 29
      },
      "start": {
        "column": 9,
        "line": 29
      }
    }
  },
  {
    "diff": "--- src/nested_function.rs\n+++ replace has_nested -> u32 with 0\n@@ -1,13 +1,10 @@\n fn has_nested() -> u32 {\n-    fn inner() -> u32 {\n-        12\n-    }\n-    inner() * inner()\n+    0 /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn has_nested() {\n         assert_eq!(super::has_nested(), 144);\n     }\n",
    "file": "src/nested_function.rs",
    "function": {
      "function_name": "has_nested",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 6
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0",
    "span": {
      "end": {
        "column": 22,
        "line": 5
      },
      "start": {
        "column": 5,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/nested_function.rs\n+++ replace has_nested -> u32 with 1\n@@ -1,13 +1,10 @@\n fn has_nested() -> u32 {\n-    fn inner() -> u32 {\n-        12\n-    }\n-    inner() * inner()\n+    1 /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn has_nested() {\n         assert_eq!(super::has_nested(), 144);\n     }\n",
    "file": "src/nested_function.rs",
    "function": {
      "function_name": "has_nested",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 6
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1",
    "span": {
      "end": {
        "column": 22,
        "line": 5
      },
      "start": {
        "column": 5,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/nested_function.rs\n+++ replace has_nested::inner -> u32 with 0\n@@ -1,11 +1,11 @@\n fn has_nested() -> u32 {\n     fn inner() -> u32 {\n-        12\n+        0 /* ~ changed by cargo-mutants ~ */\n     }\n     inner() * inner()\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn has_nested() {\n",
    "file": "src/nested_function.rs",
    "function": {
      "function_name": "has_nested::inner",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 6,
          "line": 4
        },
        "start": {
          "column": 5,
          "line": 2
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0",
    "span": {
      "end": {
        "column": 11,
        "line": 3
      },
      "start": {
        "column": 9,
        "line": 3
      }
    }
  },
  {
    "diff": "--- src/nested_function.rs\n+++ replace has_nested::inner -> u32 with 1\n@@ -1,11 +1,11 @@\n fn has_nested() -> u32 {\n     fn inner() -> u32 {\n-        12\n+        1 /* ~ changed by cargo-mutants ~ */\n     }\n     inner() * inner()\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn has_nested() {\n",
    "file": "src/nested_function.rs",
    "function": {
      "function_name": "has_nested::inner",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 6,
          "line": 4
        },
        "start": {
          "column": 5,
          "line": 2
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1",
    "span": {
      "end": {
        "column": 11,
        "line": 3
      },
      "start": {
        "column": 9,
        "line": 3
      }
    }
  },
  {
    "diff": "--- src/nested_function.rs\n+++ replace * with + in has_nested\n@@ -1,13 +1,13 @@\n fn has_nested() -> u32 {\n     fn inner() -> u32 {\n         12\n     }\n-    inner() * inner()\n+    inner() + /* ~ changed by cargo-mutants ~ */ inner()\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn has_nested() {\n         assert_eq!(super::has_nested(), 144);\n     }\n",
    "file": "src/nested_function.rs",
    "function": {
      "function_name": "has_nested",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 6
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "+",
    "span": {
      "end": {
        "column": 14,
        "line": 5
      },
      "start": {
        "column": 13,
        "line": 5
      }
    }
  },
  {
    "diff": "--- src/nested_function.rs\n+++ replace * with / in has_nested\n@@ -1,13 +1,13 @@\n fn has_nested() -> u32 {\n     fn inner() -> u32 {\n         12\n     }\n-    inner() * inner()\n+    inner() / /* ~ changed by cargo-mutants ~ */ inner()\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn has_nested() {\n         assert_eq!(super::has_nested(), 144);\n     }\n",
    "file": "src/nested_function.rs",
    "function": {
      "function_name": "has_nested",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 6
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "/",
    "span": {
      "end": {
        "column": 14,
        "line": 5
      },
      "start": {
        "column": 13,
        "line": 5
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace double_float -> f32 with 0.0\n@@ -1,10 +1,10 @@\n fn double_float(a: f32) -> f32 {\n-    2.0 * a\n+    0.0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "double_float",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0.0",
    "span": {
      "end": {
        "column": 12,
        "line": 2
      },
      "start": {
        "column": 5,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace double_float -> f32 with 1.0\n@@ -1,10 +1,10 @@\n fn double_float(a: f32) -> f32 {\n-    2.0 * a\n+    1.0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "double_float",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1.0",
    "span": {
      "end": {
        "column": 12,
        "line": 2
      },
      "start": {
        "column": 5,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace double_float -> f32 with -1.0\n@@ -1,10 +1,10 @@\n fn double_float(a: f32) -> f32 {\n-    2.0 * a\n+    -1.0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "double_float",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "-1.0",
    "span": {
      "end": {
        "column": 12,
        "line": 2
      },
      "start": {
        "column": 5,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace * with + in double_float\n@@ -1,10 +1,10 @@\n fn double_float(a: f32) -> f32 {\n-    2.0 * a\n+    2.0 + /* ~ changed by cargo-mutants ~ */ a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "double_float",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "+",
    "span": {
      "end": {
        "column": 10,
        "line": 2
      },
      "start": {
        "column": 9,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace * with / in double_float\n@@ -1,10 +1,10 @@\n fn double_float(a: f32) -> f32 {\n-    2.0 * a\n+    2.0 / /* ~ changed by cargo-mutants ~ */ a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "double_float",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 3
        },
        "start": {
          "column": 1,
          "line": 1
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "/",
    "span": {
      "end": {
        "column": 10,
        "line": 2
      },
      "start": {
        "column": 9,
        "line": 2
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace is_double -> bool with true\n@@ -1,14 +1,14 @@\n fn double_float(a: f32) -> f32 {\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n-    a == 2 * b\n+    true /* ~ changed by cargo-mutants ~ */\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "is_double",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "true",
    "span": {
      "end": {
        "column": 15,
        "line": 6
      },
      "start": {
        "column": 5,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace is_double -> bool with false\n@@ -1,14 +1,14 @@\n fn double_float(a: f32) -> f32 {\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n-    a == 2 * b\n+    false /* ~ changed by cargo-mutants ~ */\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "is_double",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "false",
    "span": {
      "end": {
        "column": 15,
        "line": 6
      },
      "start": {
        "column": 5,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace == with != in is_double\n@@ -1,14 +1,14 @@\n fn double_float(a: f32) -> f32 {\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n-    a == 2 * b\n+    a != /* ~ changed by cargo-mutants ~ */ 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "is_double",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "!=",
    "span": {
      "end": {
        "column": 9,
        "line": 6
      },
      "start": {
        "column": 7,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace * with + in is_double\n@@ -1,14 +1,14 @@\n fn double_float(a: f32) -> f32 {\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n-    a == 2 * b\n+    a == 2 + /* ~ changed by cargo-mutants ~ */ b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "is_double",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "+",
    "span": {
      "end": {
        "column": 13,
        "line": 6
      },
      "start": {
        "column": 12,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace * with / in is_double\n@@ -1,14 +1,14 @@\n fn double_float(a: f32) -> f32 {\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n-    a == 2 * b\n+    a == 2 / /* ~ changed by cargo-mutants ~ */ b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "is_double",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 5
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "/",
    "span": {
      "end": {
        "column": 13,
        "line": 6
      },
      "start": {
        "column": 12,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace negate_i32 -> i32 with 0\n@@ -2,17 +2,17 @@\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n-    -a\n+    0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0",
    "span": {
      "end": {
        "column": 7,
        "line": 10
      },
      "start": {
        "column": 5,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace negate_i32 -> i32 with 1\n@@ -2,17 +2,17 @@\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n-    -a\n+    1 /* ~ changed by cargo-mutants ~ */\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1",
    "span": {
      "end": {
        "column": 7,
        "line": 10
      },
      "start": {
        "column": 5,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace negate_i32 -> i32 with -1\n@@ -2,17 +2,17 @@\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n-    -a\n+    -1 /* ~ changed by cargo-mutants ~ */\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "-1",
    "span": {
      "end": {
        "column": 7,
        "line": 10
      },
      "start": {
        "column": 5,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ delete - in negate_i32\n@@ -2,17 +2,17 @@\n     2.0 * a\n }\n \n fn is_double(a: u32, b: u32) -> bool {\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n-    -a\n+     /* ~ changed by cargo-mutants ~ */a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 11
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "UnaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "",
    "span": {
      "end": {
        "column": 6,
        "line": 10
      },
      "start": {
        "column": 5,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace negate_f32 -> f32 with 0.0\n@@ -6,17 +6,17 @@\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n-    -a\n+    0.0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_f32",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 13
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0.0",
    "span": {
      "end": {
        "column": 7,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace negate_f32 -> f32 with 1.0\n@@ -6,17 +6,17 @@\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n-    -a\n+    1.0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_f32",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 13
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1.0",
    "span": {
      "end": {
        "column": 7,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace negate_f32 -> f32 with -1.0\n@@ -6,17 +6,17 @@\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n-    -a\n+    -1.0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_f32",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 13
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "-1.0",
    "span": {
      "end": {
        "column": 7,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ delete - in negate_f32\n@@ -6,17 +6,17 @@\n     a == 2 * b\n }\n \n fn negate_i32(a: i32) -> i32 {\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n-    -a\n+     /* ~ changed by cargo-mutants ~ */a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "negate_f32",
      "return_type": "-> f32",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 13
        }
      }
    },
    "genre": "UnaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "",
    "span": {
      "end": {
        "column": 6,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace bitwise_not_i32 -> i32 with 0\n@@ -10,17 +10,17 @@\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n-    !a\n+    0 /* ~ changed by cargo-mutants ~ */\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "bitwise_not_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 17
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0",
    "span": {
      "end": {
        "column": 7,
        "line": 18
      },
      "start": {
        "column": 5,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace bitwise_not_i32 -> i32 with 1\n@@ -10,17 +10,17 @@\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n-    !a\n+    1 /* ~ changed by cargo-mutants ~ */\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "bitwise_not_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 17
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1",
    "span": {
      "end": {
        "column": 7,
        "line": 18
      },
      "start": {
        "column": 5,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace bitwise_not_i32 -> i32 with -1\n@@ -10,17 +10,17 @@\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n-    !a\n+    -1 /* ~ changed by cargo-mutants ~ */\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "bitwise_not_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 17
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "-1",
    "span": {
      "end": {
        "column": 7,
        "line": 18
      },
      "start": {
        "column": 5,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ delete ! in bitwise_not_i32\n@@ -10,17 +10,17 @@\n     -a\n }\n \n fn negate_f32(a: f32) -> f32 {\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n-    !a\n+     /* ~ changed by cargo-mutants ~ */a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n     !a\n }\n \n #[cfg(test)]\n mod test {\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "bitwise_not_i32",
      "return_type": "-> i32",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 17
        }
      }
    },
    "genre": "UnaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "",
    "span": {
      "end": {
        "column": 6,
        "line": 18
      },
      "start": {
        "column": 5,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace bitwise_not_u32 -> u32 with 0\n@@ -14,17 +14,17 @@\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n-    !a\n+    0 /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     #[test]\n     fn double_zero() {\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "bitwise_not_u32",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 23
        },
        "start": {
          "column": 1,
          "line": 21
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0",
    "span": {
      "end": {
        "column": 7,
        "line": 22
      },
      "start": {
        "column": 5,
        "line": 22
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ replace bitwise_not_u32 -> u32 with 1\n@@ -14,17 +14,17 @@\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n-    !a\n+    1 /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     #[test]\n     fn double_zero() {\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "bitwise_not_u32",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 23
        },
        "start": {
          "column": 1,
          "line": 21
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1",
    "span": {
      "end": {
        "column": 7,
        "line": 22
      },
      "start": {
        "column": 5,
        "line": 22
      }
    }
  },
  {
    "diff": "--- src/numbers.rs\n+++ delete ! in bitwise_not_u32\n@@ -14,17 +14,17 @@\n     -a\n }\n \n fn bitwise_not_i32(a: i32) -> i32 {\n     !a\n }\n \n fn bitwise_not_u32(a: u32) -> u32 {\n-    !a\n+     /* ~ changed by cargo-mutants ~ */a\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     #[test]\n     fn double_zero() {\n",
    "file": "src/numbers.rs",
    "function": {
      "function_name": "bitwise_not_u32",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 23
        },
        "start": {
          "column": 1,
          "line": 21
        }
      }
    },
    "genre": "UnaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "",
    "span": {
      "end": {
        "column": 6,
        "line": 22
      },
      "start": {
        "column": 5,
        "line": 22
      }
    }
  },
  {
    "diff": "--- src/result.rs\n+++ replace simple_result -> Result<&'static str, ()> with Ok(\"\")\n@@ -1,14 +1,14 @@\n // /// Function returning a Result.\n // fn io_result() -> std::io::Result<\n \n /// Simple easily-recognizable Result.\n fn simple_result() -> Result<&'static str, ()> {\n-    Ok(\"success\")\n+    Ok(\"\") /* ~ changed by cargo-mutants ~ */\n }\n \n fn error_if_negative(a: i32) -> Result<(), ()> {\n     if a < 0 {\n         Err(())\n     } else {\n         Ok(())\n     }\n",
    "file": "src/result.rs",
    "function": {
      "function_name": "simple_result",
      "return_type": "-> Result<&'static str, ()>",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 4
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Ok(\"\")",
    "span": {
      "end": {
        "column": 18,
        "line": 6
      },
      "start": {
        "column": 5,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/result.rs\n+++ replace simple_result -> Result<&'static str, ()> with Ok(\"xyzzy\")\n@@ -1,14 +1,14 @@\n // /// Function returning a Result.\n // fn io_result() -> std::io::Result<\n \n /// Simple easily-recognizable Result.\n fn simple_result() -> Result<&'static str, ()> {\n-    Ok(\"success\")\n+    Ok(\"xyzzy\") /* ~ changed by cargo-mutants ~ */\n }\n \n fn error_if_negative(a: i32) -> Result<(), ()> {\n     if a < 0 {\n         Err(())\n     } else {\n         Ok(())\n     }\n",
    "file": "src/result.rs",
    "function": {
      "function_name": "simple_result",
      "return_type": "-> Result<&'static str, ()>",
      "span": {
        "end": {
          "column": 2,
          "line": 7
        },
        "start": {
          "column": 1,
          "line": 4
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Ok(\"xyzzy\")",
    "span": {
      "end": {
        "column": 18,
        "line": 6
      },
      "start": {
        "column": 5,
        "line": 6
      }
    }
  },
  {
    "diff": "--- src/result.rs\n+++ replace error_if_negative -> Result<(), ()> with Ok(())\n@@ -2,21 +2,17 @@\n // fn io_result() -> std::io::Result<\n \n /// Simple easily-recognizable Result.\n fn simple_result() -> Result<&'static str, ()> {\n     Ok(\"success\")\n }\n \n fn error_if_negative(a: i32) -> Result<(), ()> {\n-    if a < 0 {\n-        Err(())\n-    } else {\n-        Ok(())\n-    }\n+    Ok(()) /* ~ changed by cargo-mutants ~ */\n }\n \n fn result_with_no_apparent_type_args() -> std::fmt::Result {\n     Err(Default::default())\n }\n \n mod test {\n     use super::*;\n",
    "file": "src/result.rs",
    "function": {
      "function_name": "error_if_negative",
      "return_type": "-> Result<(), ()>",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Ok(())",
    "span": {
      "end": {
        "column": 6,
        "line": 14
      },
      "start": {
        "column": 5,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/result.rs\n+++ replace < with == in error_if_negative\n@@ -2,17 +2,17 @@\n // fn io_result() -> std::io::Result<\n \n /// Simple easily-recognizable Result.\n fn simple_result() -> Result<&'static str, ()> {\n     Ok(\"success\")\n }\n \n fn error_if_negative(a: i32) -> Result<(), ()> {\n-    if a < 0 {\n+    if a == /* ~ changed by cargo-mutants ~ */ 0 {\n         Err(())\n     } else {\n         Ok(())\n     }\n }\n \n fn result_with_no_apparent_type_args() -> std::fmt::Result {\n     Err(Default::default())\n",
    "file": "src/result.rs",
    "function": {
      "function_name": "error_if_negative",
      "return_type": "-> Result<(), ()>",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "==",
    "span": {
      "end": {
        "column": 11,
        "line": 10
      },
      "start": {
        "column": 10,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/result.rs\n+++ replace < with > in error_if_negative\n@@ -2,17 +2,17 @@\n // fn io_result() -> std::io::Result<\n \n /// Simple easily-recognizable Result.\n fn simple_result() -> Result<&'static str, ()> {\n     Ok(\"success\")\n }\n \n fn error_if_negative(a: i32) -> Result<(), ()> {\n-    if a < 0 {\n+    if a > /* ~ changed by cargo-mutants ~ */ 0 {\n         Err(())\n     } else {\n         Ok(())\n     }\n }\n \n fn result_with_no_apparent_type_args() -> std::fmt::Result {\n     Err(Default::default())\n",
    "file": "src/result.rs",
    "function": {
      "function_name": "error_if_negative",
      "return_type": "-> Result<(), ()>",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": ">",
    "span": {
      "end": {
        "column": 11,
        "line": 10
      },
      "start": {
        "column": 10,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/result.rs\n+++ replace < with <= in error_if_negative\n@@ -2,17 +2,17 @@\n // fn io_result() -> std::io::Result<\n \n /// Simple easily-recognizable Result.\n fn simple_result() -> Result<&'static str, ()> {\n     Ok(\"success\")\n }\n \n fn error_if_negative(a: i32) -> Result<(), ()> {\n-    if a < 0 {\n+    if a <= /* ~ changed by cargo-mutants ~ */ 0 {\n         Err(())\n     } else {\n         Ok(())\n     }\n }\n \n fn result_with_no_apparent_type_args() -> std::fmt::Result {\n     Err(Default::default())\n",
    "file": "src/result.rs",
    "function": {
      "function_name": "error_if_negative",
      "return_type": "-> Result<(), ()>",
      "span": {
        "end": {
          "column": 2,
          "line": 15
        },
        "start": {
          "column": 1,
          "line": 9
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "<=",
    "span": {
      "end": {
        "column": 11,
        "line": 10
      },
      "start": {
        "column": 10,
        "line": 10
      }
    }
  },
  {
    "diff": "--- src/result.rs\n+++ replace result_with_no_apparent_type_args -> std::fmt::Result with Ok(Default::default())\n@@ -10,17 +10,17 @@\n     if a < 0 {\n         Err(())\n     } else {\n         Ok(())\n     }\n }\n \n fn result_with_no_apparent_type_args() -> std::fmt::Result {\n-    Err(Default::default())\n+    Ok(Default::default()) /* ~ changed by cargo-mutants ~ */\n }\n \n mod test {\n     use super::*;\n \n     #[test]\n     fn simple_result_success() {\n         assert_eq!(simple_result(), Ok(\"success\"));\n",
    "file": "src/result.rs",
    "function": {
      "function_name": "result_with_no_apparent_type_args",
      "return_type": "-> std::fmt::Result",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 17
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Ok(Default::default())",
    "span": {
      "end": {
        "column": 28,
        "line": 18
      },
      "start": {
        "column": 5,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/sets.rs\n+++ replace make_a_set -> BTreeSet<String> with BTreeSet::new()\n@@ -1,13 +1,10 @@\n use std::collections::BTreeSet;\n \n fn make_a_set() -> BTreeSet<String> {\n-    let mut s = BTreeSet::new();\n-    s.insert(\"one\".into());\n-    s.insert(\"two\".into());\n-    s\n+    BTreeSet::new() /* ~ changed by cargo-mutants ~ */\n }\n \n #[test]\n fn set_has_two_elements() {\n     assert_eq!(make_a_set().len(), 2);\n }\n",
    "file": "src/sets.rs",
    "function": {
      "function_name": "make_a_set",
      "return_type": "-> BTreeSet<String>",
      "span": {
        "end": {
          "column": 2,
          "line": 8
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "BTreeSet::new()",
    "span": {
      "end": {
        "column": 6,
        "line": 7
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/sets.rs\n+++ replace make_a_set -> BTreeSet<String> with BTreeSet::from_iter([String::new()])\n@@ -1,13 +1,10 @@\n use std::collections::BTreeSet;\n \n fn make_a_set() -> BTreeSet<String> {\n-    let mut s = BTreeSet::new();\n-    s.insert(\"one\".into());\n-    s.insert(\"two\".into());\n-    s\n+    BTreeSet::from_iter([String::new()]) /* ~ changed by cargo-mutants ~ */\n }\n \n #[test]\n fn set_has_two_elements() {\n     assert_eq!(make_a_set().len(), 2);\n }\n",
    "file": "src/sets.rs",
    "function": {
      "function_name": "make_a_set",
      "return_type": "-> BTreeSet<String>",
      "span": {
        "end": {
          "column": 2,
          "line": 8
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "BTreeSet::from_iter([String::new()])",
    "span": {
      "end": {
        "column": 6,
        "line": 7
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/sets.rs\n+++ replace make_a_set -> BTreeSet<String> with BTreeSet::from_iter([\"xyzzy\".into()])\n@@ -1,13 +1,10 @@\n use std::collections::BTreeSet;\n \n fn make_a_set() -> BTreeSet<String> {\n-    let mut s = BTreeSet::new();\n-    s.insert(\"one\".into());\n-    s.insert(\"two\".into());\n-    s\n+    BTreeSet::from_iter([\"xyzzy\".into()]) /* ~ changed by cargo-mutants ~ */\n }\n \n #[test]\n fn set_has_two_elements() {\n     assert_eq!(make_a_set().len(), 2);\n }\n",
    "file": "src/sets.rs",
    "function": {
      "function_name": "make_a_set",
      "return_type": "-> BTreeSet<String>",
      "span": {
        "end": {
          "column": 2,
          "line": 8
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "BTreeSet::from_iter([\"xyzzy\".into()])",
    "span": {
      "end": {
        "column": 6,
        "line": 7
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace returns_unit with ()\n@@ -1,16 +1,16 @@\n /// This function is only built for tests so shouldn't be mutated.\n #[cfg(test)]\n fn outer_test_helper() {\n     panic!()\n }\n \n fn returns_unit(a: &mut u32) {\n-    *a += 1;\n+    () /* ~ changed by cargo-mutants ~ */\n }\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "returns_unit",
      "return_type": "",
      "span": {
        "end": {
          "column": 2,
          "line": 9
        },
        "start": {
          "column": 1,
          "line": 7
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "()",
    "span": {
      "end": {
        "column": 13,
        "line": 8
      },
      "start": {
        "column": 5,
        "line": 8
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace += with -= in returns_unit\n@@ -1,16 +1,16 @@\n /// This function is only built for tests so shouldn't be mutated.\n #[cfg(test)]\n fn outer_test_helper() {\n     panic!()\n }\n \n fn returns_unit(a: &mut u32) {\n-    *a += 1;\n+    *a -= /* ~ changed by cargo-mutants ~ */ 1;\n }\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "returns_unit",
      "return_type": "",
      "span": {
        "end": {
          "column": 2,
          "line": 9
        },
        "start": {
          "column": 1,
          "line": 7
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "-=",
    "span": {
      "end": {
        "column": 10,
        "line": 8
      },
      "start": {
        "column": 8,
        "line": 8
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace += with *= in returns_unit\n@@ -1,16 +1,16 @@\n /// This function is only built for tests so shouldn't be mutated.\n #[cfg(test)]\n fn outer_test_helper() {\n     panic!()\n }\n \n fn returns_unit(a: &mut u32) {\n-    *a += 1;\n+    *a *= /* ~ changed by cargo-mutants ~ */ 1;\n }\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "returns_unit",
      "return_type": "",
      "span": {
        "end": {
          "column": 2,
          "line": 9
        },
        "start": {
          "column": 1,
          "line": 7
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "*=",
    "span": {
      "end": {
        "column": 10,
        "line": 8
      },
      "start": {
        "column": 8,
        "line": 8
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace returns_42u32 -> u32 with 0\n@@ -5,17 +5,17 @@\n }\n \n fn returns_unit(a: &mut u32) {\n     *a += 1;\n }\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n-    42\n+    0 /* ~ changed by cargo-mutants ~ */\n }\n \n /// Can be mutated to return bool::default.\n fn divisible_by_three(a: u32) -> bool {\n     a % 3 == 0\n }\n \n /// Return `s` repeated twice.\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "returns_42u32",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 14
        },
        "start": {
          "column": 1,
          "line": 11
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0",
    "span": {
      "end": {
        "column": 7,
        "line": 13
      },
      "start": {
        "column": 5,
        "line": 13
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace returns_42u32 -> u32 with 1\n@@ -5,17 +5,17 @@\n }\n \n fn returns_unit(a: &mut u32) {\n     *a += 1;\n }\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n-    42\n+    1 /* ~ changed by cargo-mutants ~ */\n }\n \n /// Can be mutated to return bool::default.\n fn divisible_by_three(a: u32) -> bool {\n     a % 3 == 0\n }\n \n /// Return `s` repeated twice.\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "returns_42u32",
      "return_type": "-> u32",
      "span": {
        "end": {
          "column": 2,
          "line": 14
        },
        "start": {
          "column": 1,
          "line": 11
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1",
    "span": {
      "end": {
        "column": 7,
        "line": 13
      },
      "start": {
        "column": 5,
        "line": 13
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace divisible_by_three -> bool with true\n@@ -10,17 +10,17 @@\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n fn divisible_by_three(a: u32) -> bool {\n-    a % 3 == 0\n+    true /* ~ changed by cargo-mutants ~ */\n }\n \n /// Return `s` repeated twice.\n ///\n /// ```\n /// assert_eq!(cargo_mutants_testdata_well_tested::simple_fns::double_string(\"cat\"), \"catcat\");\n /// ```\n pub fn double_string(s: &str) -> String {\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "divisible_by_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 16
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "true",
    "span": {
      "end": {
        "column": 15,
        "line": 18
      },
      "start": {
        "column": 5,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace divisible_by_three -> bool with false\n@@ -10,17 +10,17 @@\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n fn divisible_by_three(a: u32) -> bool {\n-    a % 3 == 0\n+    false /* ~ changed by cargo-mutants ~ */\n }\n \n /// Return `s` repeated twice.\n ///\n /// ```\n /// assert_eq!(cargo_mutants_testdata_well_tested::simple_fns::double_string(\"cat\"), \"catcat\");\n /// ```\n pub fn double_string(s: &str) -> String {\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "divisible_by_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 16
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "false",
    "span": {
      "end": {
        "column": 15,
        "line": 18
      },
      "start": {
        "column": 5,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace == with != in divisible_by_three\n@@ -10,17 +10,17 @@\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n fn divisible_by_three(a: u32) -> bool {\n-    a % 3 == 0\n+    a % 3 != /* ~ changed by cargo-mutants ~ */ 0\n }\n \n /// Return `s` repeated twice.\n ///\n /// ```\n /// assert_eq!(cargo_mutants_testdata_well_tested::simple_fns::double_string(\"cat\"), \"catcat\");\n /// ```\n pub fn double_string(s: &str) -> String {\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "divisible_by_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 16
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "!=",
    "span": {
      "end": {
        "column": 13,
        "line": 18
      },
      "start": {
        "column": 11,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace % with / in divisible_by_three\n@@ -10,17 +10,17 @@\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n fn divisible_by_three(a: u32) -> bool {\n-    a % 3 == 0\n+    a / /* ~ changed by cargo-mutants ~ */ 3 == 0\n }\n \n /// Return `s` repeated twice.\n ///\n /// ```\n /// assert_eq!(cargo_mutants_testdata_well_tested::simple_fns::double_string(\"cat\"), \"catcat\");\n /// ```\n pub fn double_string(s: &str) -> String {\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "divisible_by_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 16
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "/",
    "span": {
      "end": {
        "column": 8,
        "line": 18
      },
      "start": {
        "column": 7,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace % with + in divisible_by_three\n@@ -10,17 +10,17 @@\n \n /// Can be mutated to return default (0).\n fn returns_42u32() -> u32 {\n     42\n }\n \n /// Can be mutated to return bool::default.\n fn divisible_by_three(a: u32) -> bool {\n-    a % 3 == 0\n+    a + /* ~ changed by cargo-mutants ~ */ 3 == 0\n }\n \n /// Return `s` repeated twice.\n ///\n /// ```\n /// assert_eq!(cargo_mutants_testdata_well_tested::simple_fns::double_string(\"cat\"), \"catcat\");\n /// ```\n pub fn double_string(s: &str) -> String {\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "divisible_by_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 2,
          "line": 19
        },
        "start": {
          "column": 1,
          "line": 16
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "+",
    "span": {
      "end": {
        "column": 8,
        "line": 18
      },
      "start": {
        "column": 7,
        "line": 18
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace double_string -> String with String::new()\n@@ -19,19 +19,17 @@\n }\n \n /// Return `s` repeated twice.\n ///\n /// ```\n /// assert_eq!(cargo_mutants_testdata_well_tested::simple_fns::double_string(\"cat\"), \"catcat\");\n /// ```\n pub fn double_string(s: &str) -> String {\n-    let mut r = s.to_owned();\n-    r.push_str(s);\n-    r\n+    String::new() /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n \n     /// A test helper function: it shouldn't be mutated because it's inside a\n     /// `#[cfg(tests)]` mod.\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "double_string",
      "return_type": "-> String",
      "span": {
        "end": {
          "column": 2,
          "line": 30
        },
        "start": {
          "column": 1,
          "line": 21
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "String::new()",
    "span": {
      "end": {
        "column": 6,
        "line": 29
      },
      "start": {
        "column": 5,
        "line": 27
      }
    }
  },
  {
    "diff": "--- src/simple_fns.rs\n+++ replace double_string -> String with \"xyzzy\".into()\n@@ -19,19 +19,17 @@\n }\n \n /// Return `s` repeated twice.\n ///\n /// ```\n /// assert_eq!(cargo_mutants_testdata_well_tested::simple_fns::double_string(\"cat\"), \"catcat\");\n /// ```\n pub fn double_string(s: &str) -> String {\n-    let mut r = s.to_owned();\n-    r.push_str(s);\n-    r\n+    \"xyzzy\".into() /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod tests {\n     use super::*;\n \n     /// A test helper function: it shouldn't be mutated because it's inside a\n     /// `#[cfg(tests)]` mod.\n",
    "file": "src/simple_fns.rs",
    "function": {
      "function_name": "double_string",
      "return_type": "-> String",
      "span": {
        "end": {
          "column": 2,
          "line": 30
        },
        "start": {
          "column": 1,
          "line": 21
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "\"xyzzy\".into()",
    "span": {
      "end": {
        "column": 6,
        "line": 29
      },
      "start": {
        "column": 5,
        "line": 27
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace pad -> &'a[Cow<'static, str>] with Vec::leak(Vec::new())\n@@ -1,17 +1,12 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n-    for a in aa.iter_mut() {\n-        if a.len() < 3 {\n-            a.to_mut().push_str(\"___\");\n-        }\n-    }\n-    aa\n+    Vec::leak(Vec::new()) /* ~ changed by cargo-mutants ~ */\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n         *x *= 2\n     }\n     a\n }\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(Vec::new())",
    "span": {
      "end": {
        "column": 7,
        "line": 9
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Borrowed(\"\")])\n@@ -1,17 +1,12 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n-    for a in aa.iter_mut() {\n-        if a.len() < 3 {\n-            a.to_mut().push_str(\"___\");\n-        }\n-    }\n-    aa\n+    Vec::leak(vec![Cow::Borrowed(\"\")]) /* ~ changed by cargo-mutants ~ */\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n         *x *= 2\n     }\n     a\n }\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(vec![Cow::Borrowed(\"\")])",
    "span": {
      "end": {
        "column": 7,
        "line": 9
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Owned(\"\".to_owned())])\n@@ -1,17 +1,12 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n-    for a in aa.iter_mut() {\n-        if a.len() < 3 {\n-            a.to_mut().push_str(\"___\");\n-        }\n-    }\n-    aa\n+    Vec::leak(vec![Cow::Owned(\"\".to_owned())]) /* ~ changed by cargo-mutants ~ */\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n         *x *= 2\n     }\n     a\n }\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(vec![Cow::Owned(\"\".to_owned())])",
    "span": {
      "end": {
        "column": 7,
        "line": 9
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Borrowed(\"xyzzy\")])\n@@ -1,17 +1,12 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n-    for a in aa.iter_mut() {\n-        if a.len() < 3 {\n-            a.to_mut().push_str(\"___\");\n-        }\n-    }\n-    aa\n+    Vec::leak(vec![Cow::Borrowed(\"xyzzy\")]) /* ~ changed by cargo-mutants ~ */\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n         *x *= 2\n     }\n     a\n }\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(vec![Cow::Borrowed(\"xyzzy\")])",
    "span": {
      "end": {
        "column": 7,
        "line": 9
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace pad -> &'a[Cow<'static, str>] with Vec::leak(vec![Cow::Owned(\"xyzzy\".to_owned())])\n@@ -1,17 +1,12 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n-    for a in aa.iter_mut() {\n-        if a.len() < 3 {\n-            a.to_mut().push_str(\"___\");\n-        }\n-    }\n-    aa\n+    Vec::leak(vec![Cow::Owned(\"xyzzy\".to_owned())]) /* ~ changed by cargo-mutants ~ */\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n         *x *= 2\n     }\n     a\n }\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(vec![Cow::Owned(\"xyzzy\".to_owned())])",
    "span": {
      "end": {
        "column": 7,
        "line": 9
      },
      "start": {
        "column": 5,
        "line": 4
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace < with == in pad\n@@ -1,13 +1,13 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n     for a in aa.iter_mut() {\n-        if a.len() < 3 {\n+        if a.len() == /* ~ changed by cargo-mutants ~ */ 3 {\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "==",
    "span": {
      "end": {
        "column": 21,
        "line": 5
      },
      "start": {
        "column": 20,
        "line": 5
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace < with > in pad\n@@ -1,13 +1,13 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n     for a in aa.iter_mut() {\n-        if a.len() < 3 {\n+        if a.len() > /* ~ changed by cargo-mutants ~ */ 3 {\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": ">",
    "span": {
      "end": {
        "column": 21,
        "line": 5
      },
      "start": {
        "column": 20,
        "line": 5
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace < with <= in pad\n@@ -1,13 +1,13 @@\n use std::borrow::Cow;\n \n fn pad<'a>(aa: &'a mut [Cow<'static, str>]) -> &'a [Cow<'static, str>] {\n     for a in aa.iter_mut() {\n-        if a.len() < 3 {\n+        if a.len() <= /* ~ changed by cargo-mutants ~ */ 3 {\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "pad",
      "return_type": "-> &'a[Cow<'static, str>]",
      "span": {
        "end": {
          "column": 2,
          "line": 10
        },
        "start": {
          "column": 1,
          "line": 3
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "<=",
    "span": {
      "end": {
        "column": 21,
        "line": 5
      },
      "start": {
        "column": 20,
        "line": 5
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace return_mut_slice -> &mut[usize] with Vec::leak(Vec::new())\n@@ -5,20 +5,17 @@\n         if a.len() < 3 {\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n-    for x in a.iter_mut() {\n-        *x *= 2\n-    }\n-    a\n+    Vec::leak(Vec::new()) /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn test_pad() {\n         assert_eq!(\n             super::pad(&mut [\"hello\".into(), \"ok\".into(), \"cat\".into()]),\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "return_mut_slice",
      "return_type": "-> &mut[usize]",
      "span": {
        "end": {
          "column": 2,
          "line": 17
        },
        "start": {
          "column": 1,
          "line": 12
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(Vec::new())",
    "span": {
      "end": {
        "column": 6,
        "line": 16
      },
      "start": {
        "column": 5,
        "line": 13
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace return_mut_slice -> &mut[usize] with Vec::leak(vec![0])\n@@ -5,20 +5,17 @@\n         if a.len() < 3 {\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n-    for x in a.iter_mut() {\n-        *x *= 2\n-    }\n-    a\n+    Vec::leak(vec![0]) /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn test_pad() {\n         assert_eq!(\n             super::pad(&mut [\"hello\".into(), \"ok\".into(), \"cat\".into()]),\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "return_mut_slice",
      "return_type": "-> &mut[usize]",
      "span": {
        "end": {
          "column": 2,
          "line": 17
        },
        "start": {
          "column": 1,
          "line": 12
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(vec![0])",
    "span": {
      "end": {
        "column": 6,
        "line": 16
      },
      "start": {
        "column": 5,
        "line": 13
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace return_mut_slice -> &mut[usize] with Vec::leak(vec![1])\n@@ -5,20 +5,17 @@\n         if a.len() < 3 {\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n-    for x in a.iter_mut() {\n-        *x *= 2\n-    }\n-    a\n+    Vec::leak(vec![1]) /* ~ changed by cargo-mutants ~ */\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn test_pad() {\n         assert_eq!(\n             super::pad(&mut [\"hello\".into(), \"ok\".into(), \"cat\".into()]),\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "return_mut_slice",
      "return_type": "-> &mut[usize]",
      "span": {
        "end": {
          "column": 2,
          "line": 17
        },
        "start": {
          "column": 1,
          "line": 12
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "Vec::leak(vec![1])",
    "span": {
      "end": {
        "column": 6,
        "line": 16
      },
      "start": {
        "column": 5,
        "line": 13
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace *= with += in return_mut_slice\n@@ -6,17 +6,17 @@\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n-        *x *= 2\n+        *x += /* ~ changed by cargo-mutants ~ */ 2\n     }\n     a\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn test_pad() {\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "return_mut_slice",
      "return_type": "-> &mut[usize]",
      "span": {
        "end": {
          "column": 2,
          "line": 17
        },
        "start": {
          "column": 1,
          "line": 12
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "+=",
    "span": {
      "end": {
        "column": 14,
        "line": 14
      },
      "start": {
        "column": 12,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/slices.rs\n+++ replace *= with /= in return_mut_slice\n@@ -6,17 +6,17 @@\n             a.to_mut().push_str(\"___\");\n         }\n     }\n     aa\n }\n \n fn return_mut_slice(a: &mut [usize]) -> &mut [usize] {\n     for x in a.iter_mut() {\n-        *x *= 2\n+        *x /= /* ~ changed by cargo-mutants ~ */ 2\n     }\n     a\n }\n \n #[cfg(test)]\n mod test {\n     #[test]\n     fn test_pad() {\n",
    "file": "src/slices.rs",
    "function": {
      "function_name": "return_mut_slice",
      "return_type": "-> &mut[usize]",
      "span": {
        "end": {
          "column": 2,
          "line": 17
        },
        "start": {
          "column": 1,
          "line": 12
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "/=",
    "span": {
      "end": {
        "column": 14,
        "line": 14
      },
      "start": {
        "column": 12,
        "line": 14
      }
    }
  },
  {
    "diff": "--- src/static_item.rs\n+++ replace == with !=\n@@ -1,8 +1,8 @@\n-static SHOULD_BE_TRUE: bool = 3 == (2 + 1);\n+static SHOULD_BE_TRUE: bool = 3 != /* ~ changed by cargo-mutants ~ */ (2 + 1);\n \n mod test {\n     #[test]\n     fn static_expression_evaluated() {\n         assert!(super::SHOULD_BE_TRUE);\n     }\n }\n",
    "file": "src/static_item.rs",
    "function": null,
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "!=",
    "span": {
      "end": {
        "column": 35,
        "line": 1
      },
      "start": {
        "column": 33,
        "line": 1
      }
    }
  },
  {
    "diff": "--- src/static_item.rs\n+++ replace + with -\n@@ -1,8 +1,8 @@\n-static SHOULD_BE_TRUE: bool = 3 == (2 + 1);\n+static SHOULD_BE_TRUE: bool = 3 == (2 - /* ~ changed by cargo-mutants ~ */ 1);\n \n mod test {\n     #[test]\n     fn static_expression_evaluated() {\n         assert!(super::SHOULD_BE_TRUE);\n     }\n }\n",
    "file": "src/static_item.rs",
    "function": null,
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "-",
    "span": {
      "end": {
        "column": 40,
        "line": 1
      },
      "start": {
        "column": 39,
        "line": 1
      }
    }
  },
  {
    "diff": "--- src/static_item.rs\n+++ replace + with *\n@@ -1,8 +1,8 @@\n-static SHOULD_BE_TRUE: bool = 3 == (2 + 1);\n+static SHOULD_BE_TRUE: bool = 3 == (2 * /* ~ changed by cargo-mutants ~ */ 1);\n \n mod test {\n     #[test]\n     fn static_expression_evaluated() {\n         assert!(super::SHOULD_BE_TRUE);\n     }\n }\n",
    "file": "src/static_item.rs",
    "function": null,
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "*",
    "span": {
      "end": {
        "column": 40,
        "line": 1
      },
      "start": {
        "column": 39,
        "line": 1
      }
    }
  },
  {
    "diff": "--- src/struct_with_lifetime.rs\n+++ replace Lex<'buf>::buf_len -> usize with 0\n@@ -7,17 +7,17 @@\n }\n \n impl<'buf> Lex<'buf> {\n     pub fn new(buf: &'buf [u8]) -> Lex<'buf> {\n         Lex { buf, pos: 0 }\n     }\n \n     pub fn buf_len(&self) -> usize {\n-        self.buf.len()\n+        0 /* ~ changed by cargo-mutants ~ */\n     }\n }\n \n #[test]\n fn get_as_slice() {\n     let buf = b\"hello\";\n     let lex = Lex::new(buf);\n     assert_eq!(lex.buf_len(), 5);\n",
    "file": "src/struct_with_lifetime.rs",
    "function": {
      "function_name": "Lex<'buf>::buf_len",
      "return_type": "-> usize",
      "span": {
        "end": {
          "column": 6,
          "line": 16
        },
        "start": {
          "column": 5,
          "line": 14
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "0",
    "span": {
      "end": {
        "column": 23,
        "line": 15
      },
      "start": {
        "column": 9,
        "line": 15
      }
    }
  },
  {
    "diff": "--- src/struct_with_lifetime.rs\n+++ replace Lex<'buf>::buf_len -> usize with 1\n@@ -7,17 +7,17 @@\n }\n \n impl<'buf> Lex<'buf> {\n     pub fn new(buf: &'buf [u8]) -> Lex<'buf> {\n         Lex { buf, pos: 0 }\n     }\n \n     pub fn buf_len(&self) -> usize {\n-        self.buf.len()\n+        1 /* ~ changed by cargo-mutants ~ */\n     }\n }\n \n #[test]\n fn get_as_slice() {\n     let buf = b\"hello\";\n     let lex = Lex::new(buf);\n     assert_eq!(lex.buf_len(), 5);\n",
    "file": "src/struct_with_lifetime.rs",
    "function": {
      "function_name": "Lex<'buf>::buf_len",
      "return_type": "-> usize",
      "span": {
        "end": {
          "column": 6,
          "line": 16
        },
        "start": {
          "column": 5,
          "line": 14
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "1",
    "span": {
      "end": {
        "column": 23,
        "line": 15
      },
      "start": {
        "column": 9,
        "line": 15
      }
    }
  },
  {
    "diff": "--- src/traits.rs\n+++ replace Something::is_three -> bool with true\n@@ -1,13 +1,13 @@\n //! Test mutation of a default fn in a trait.\n \n trait Something {\n     fn is_three(&self, a: usize) -> bool {\n-        a == 3\n+        true /* ~ changed by cargo-mutants ~ */\n     }\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     struct Three;\n",
    "file": "src/traits.rs",
    "function": {
      "function_name": "Something::is_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 6,
          "line": 6
        },
        "start": {
          "column": 5,
          "line": 4
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "true",
    "span": {
      "end": {
        "column": 15,
        "line": 5
      },
      "start": {
        "column": 9,
        "line": 5
      }
    }
  },
  {
    "diff": "--- src/traits.rs\n+++ replace Something::is_three -> bool with false\n@@ -1,13 +1,13 @@\n //! Test mutation of a default fn in a trait.\n \n trait Something {\n     fn is_three(&self, a: usize) -> bool {\n-        a == 3\n+        false /* ~ changed by cargo-mutants ~ */\n     }\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     struct Three;\n",
    "file": "src/traits.rs",
    "function": {
      "function_name": "Something::is_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 6,
          "line": 6
        },
        "start": {
          "column": 5,
          "line": 4
        }
      }
    },
    "genre": "FnValue",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "false",
    "span": {
      "end": {
        "column": 15,
        "line": 5
      },
      "start": {
        "column": 9,
        "line": 5
      }
    }
  },
  {
    "diff": "--- src/traits.rs\n+++ replace == with != in Something::is_three\n@@ -1,13 +1,13 @@\n //! Test mutation of a default fn in a trait.\n \n trait Something {\n     fn is_three(&self, a: usize) -> bool {\n-        a == 3\n+        a != /* ~ changed by cargo-mutants ~ */ 3\n     }\n }\n \n #[cfg(test)]\n mod test {\n     use super::*;\n \n     struct Three;\n",
    "file": "src/traits.rs",
    "function": {
      "function_name": "Something::is_three",
      "return_type": "-> bool",
      "span": {
        "end": {
          "column": 6,
          "line": 6
        },
        "start": {
          "column": 5,
          "line": 4
        }
      }
    },
    "genre": "BinaryOperator",
    "package": "cargo-mutants-testdata-well-tested",
    "replacement": "!=",
    "span": {
      "end": {
        "column": 13,
        "line": 5
      },
      "start": {
        "column": 11,
        "line": 5
      }
    }
  }
]
