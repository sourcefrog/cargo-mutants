---
source: src/visit.rs
expression: list_output
---
src/main.rs: replace main -> Result<()> with Ok(())
src/main.rs: replace main -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/build_dir.rs: replace BuildDir::path -> &Utf8Path with &Default::default()
src/build_dir.rs: replace BuildDir::copy -> Result<BuildDir> with Ok(Default::default())
src/build_dir.rs: replace BuildDir::copy -> Result<BuildDir> with Err(::anyhow::anyhow!("mutated!"))
src/build_dir.rs: replace <impl Debug for BuildDir>::fmt -> fmt::Result with Ok(Default::default())
src/build_dir.rs: replace <impl Debug for BuildDir>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/build_dir.rs: replace copy_tree -> Result<TempDir> with Ok(Default::default())
src/build_dir.rs: replace copy_tree -> Result<TempDir> with Err(::anyhow::anyhow!("mutated!"))
src/cargo.rs: replace run_cargo -> Result<PhaseResult> with Ok(Default::default())
src/cargo.rs: replace run_cargo -> Result<PhaseResult> with Err(::anyhow::anyhow!("mutated!"))
src/cargo.rs: replace cargo_bin -> String with String::new()
src/cargo.rs: replace cargo_bin -> String with "xyzzy".into()
src/cargo.rs: replace cargo_argv -> Vec<String> with vec![]
src/cargo.rs: replace cargo_argv -> Vec<String> with vec![String::new()]
src/cargo.rs: replace cargo_argv -> Vec<String> with vec!["xyzzy".into()]
src/cargo.rs: replace rustflags -> String with String::new()
src/cargo.rs: replace rustflags -> String with "xyzzy".into()
src/config.rs: replace Config::read_file -> Result<Config> with Ok(Default::default())
src/config.rs: replace Config::read_file -> Result<Config> with Err(::anyhow::anyhow!("mutated!"))
src/config.rs: replace Config::read_tree_config -> Result<Config> with Ok(Default::default())
src/config.rs: replace Config::read_tree_config -> Result<Config> with Err(::anyhow::anyhow!("mutated!"))
src/console.rs: replace Console::walk_tree_start with ()
src/console.rs: replace Console::walk_tree_update with ()
src/console.rs: replace Console::walk_tree_done with ()
src/console.rs: replace Console::scenario_started with ()
src/console.rs: replace Console::scenario_finished with ()
src/console.rs: replace Console::autoset_timeout with ()
src/console.rs: replace Console::start_copy with ()
src/console.rs: replace Console::finish_copy with ()
src/console.rs: replace Console::copy_progress with ()
src/console.rs: replace Console::discovered_mutants with ()
src/console.rs: replace Console::start_testing_mutants with ()
src/console.rs: replace Console::scenario_phase_started with ()
src/console.rs: replace Console::scenario_phase_finished with ()
src/console.rs: replace Console::lab_finished with ()
src/console.rs: replace Console::clear with ()
src/console.rs: replace Console::message with ()
src/console.rs: replace Console::tick with ()
src/console.rs: replace Console::make_terminal_writer -> TerminalWriter with Default::default()
src/console.rs: replace Console::make_debug_log_writer -> DebugLogWriter with Default::default()
src/console.rs: replace Console::set_debug_log with ()
src/console.rs: replace Console::setup_global_trace -> Result<()> with Ok(())
src/console.rs: replace Console::setup_global_trace -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/console.rs: replace <impl MakeWriter for TerminalWriter>::make_writer -> Self::Writer with Default::default()
src/console.rs: replace <impl Write for TerminalWriter>::write -> std::io::Result<usize> with Ok(0)
src/console.rs: replace <impl Write for TerminalWriter>::write -> std::io::Result<usize> with Ok(1)
src/console.rs: replace <impl Write for TerminalWriter>::write -> std::io::Result<usize> with Err(::anyhow::anyhow!("mutated!"))
src/console.rs: replace <impl Write for TerminalWriter>::flush -> std::io::Result<()> with Ok(())
src/console.rs: replace <impl Write for TerminalWriter>::flush -> std::io::Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/console.rs: replace <impl MakeWriter for DebugLogWriter>::make_writer -> Self::Writer with Default::default()
src/console.rs: replace <impl Write for DebugLogWriter>::write -> io::Result<usize> with Ok(0)
src/console.rs: replace <impl Write for DebugLogWriter>::write -> io::Result<usize> with Ok(1)
src/console.rs: replace <impl Write for DebugLogWriter>::write -> io::Result<usize> with Err(::anyhow::anyhow!("mutated!"))
src/console.rs: replace <impl Write for DebugLogWriter>::flush -> io::Result<()> with Ok(())
src/console.rs: replace <impl Write for DebugLogWriter>::flush -> io::Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/console.rs: replace <impl Model for LabModel>::render -> String with String::new()
src/console.rs: replace <impl Model for LabModel>::render -> String with "xyzzy".into()
src/console.rs: replace LabModel::find_scenario_mut -> &mut ScenarioModel with Box::leak(Box::new(Default::default()))
src/console.rs: replace LabModel::remove_scenario with ()
src/console.rs: replace <impl Model for WalkModel>::render -> String with String::new()
src/console.rs: replace <impl Model for WalkModel>::render -> String with "xyzzy".into()
src/console.rs: replace ScenarioModel::phase_started with ()
src/console.rs: replace ScenarioModel::phase_finished with ()
src/console.rs: replace <impl Model for ScenarioModel>::render -> String with String::new()
src/console.rs: replace <impl Model for ScenarioModel>::render -> String with "xyzzy".into()
src/console.rs: replace CopyModel::bytes_copied with ()
src/console.rs: replace <impl Model for CopyModel>::render -> String with String::new()
src/console.rs: replace <impl Model for CopyModel>::render -> String with "xyzzy".into()
src/console.rs: replace nutmeg_options -> nutmeg::Options with Default::default()
src/console.rs: replace style_outcome -> StyledObject<&'static str> with StyledObject::new()
src/console.rs: replace style_outcome -> StyledObject<&'static str> with StyledObject::from_iter([""])
src/console.rs: replace style_outcome -> StyledObject<&'static str> with StyledObject::new("")
src/console.rs: replace style_outcome -> StyledObject<&'static str> with StyledObject::from("")
src/console.rs: replace style_outcome -> StyledObject<&'static str> with StyledObject::from_iter(["xyzzy"])
src/console.rs: replace style_outcome -> StyledObject<&'static str> with StyledObject::new("xyzzy")
src/console.rs: replace style_outcome -> StyledObject<&'static str> with StyledObject::from("xyzzy")
src/console.rs: replace style_mutant -> String with String::new()
src/console.rs: replace style_mutant -> String with "xyzzy".into()
src/console.rs: replace style_elapsed_secs -> String with String::new()
src/console.rs: replace style_elapsed_secs -> String with "xyzzy".into()
src/console.rs: replace style_secs -> String with String::new()
src/console.rs: replace style_secs -> String with "xyzzy".into()
src/console.rs: replace style_minutes_seconds -> String with String::new()
src/console.rs: replace style_minutes_seconds -> String with "xyzzy".into()
src/console.rs: replace duration_minutes_seconds -> String with String::new()
src/console.rs: replace duration_minutes_seconds -> String with "xyzzy".into()
src/console.rs: replace format_mb -> String with String::new()
src/console.rs: replace format_mb -> String with "xyzzy".into()
src/console.rs: replace style_mb -> StyledObject<String> with StyledObject::new()
src/console.rs: replace style_mb -> StyledObject<String> with StyledObject::from_iter([String::new()])
src/console.rs: replace style_mb -> StyledObject<String> with StyledObject::new(String::new())
src/console.rs: replace style_mb -> StyledObject<String> with StyledObject::from(String::new())
src/console.rs: replace style_mb -> StyledObject<String> with StyledObject::from_iter(["xyzzy".into()])
src/console.rs: replace style_mb -> StyledObject<String> with StyledObject::new("xyzzy".into())
src/console.rs: replace style_mb -> StyledObject<String> with StyledObject::from("xyzzy".into())
src/console.rs: replace style_scenario -> Cow<'static, str> with Cow::Borrowed("")
src/console.rs: replace style_scenario -> Cow<'static, str> with Cow::Owned("".to_owned())
src/console.rs: replace style_scenario -> Cow<'static, str> with Cow::Borrowed("xyzzy")
src/console.rs: replace style_scenario -> Cow<'static, str> with Cow::Owned("xyzzy".to_owned())
src/console.rs: replace plural -> String with String::new()
src/console.rs: replace plural -> String with "xyzzy".into()
src/fnvalue.rs: replace return_type_replacements -> impl Iterator<Item = TokenStream> with ::std::iter::empty()
src/fnvalue.rs: replace return_type_replacements -> impl Iterator<Item = TokenStream> with ::std::iter::once(Default::default())
src/fnvalue.rs: replace type_replacements -> impl Iterator<Item = TokenStream> with ::std::iter::empty()
src/fnvalue.rs: replace type_replacements -> impl Iterator<Item = TokenStream> with ::std::iter::once(Default::default())
src/fnvalue.rs: replace path_ends_with -> bool with true
src/fnvalue.rs: replace path_ends_with -> bool with false
src/fnvalue.rs: replace match_impl_iterator -> Option<&Type> with None
src/fnvalue.rs: replace match_impl_iterator -> Option<&Type> with Some(&Default::default())
src/fnvalue.rs: replace known_container -> Option<(&Ident, &Type)> with None
src/fnvalue.rs: replace known_container -> Option<(&Ident, &Type)> with Some((&Default::default(), &Default::default()))
src/fnvalue.rs: replace known_collection -> Option<(&Ident, &Type)> with None
src/fnvalue.rs: replace known_collection -> Option<(&Ident, &Type)> with Some((&Default::default(), &Default::default()))
src/fnvalue.rs: replace known_map -> Option<(&Ident, &Type, &Type)> with None
src/fnvalue.rs: replace known_map -> Option<(&Ident, &Type, &Type)> with Some((&Default::default(), &Default::default(), &Default::default()))
src/fnvalue.rs: replace maybe_collection_or_container -> Option<(&Ident, &Type)> with None
src/fnvalue.rs: replace maybe_collection_or_container -> Option<(&Ident, &Type)> with Some((&Default::default(), &Default::default()))
src/fnvalue.rs: replace path_is_float -> bool with true
src/fnvalue.rs: replace path_is_float -> bool with false
src/fnvalue.rs: replace path_is_unsigned -> bool with true
src/fnvalue.rs: replace path_is_unsigned -> bool with false
src/fnvalue.rs: replace path_is_signed -> bool with true
src/fnvalue.rs: replace path_is_signed -> bool with false
src/fnvalue.rs: replace path_is_nonzero_signed -> bool with true
src/fnvalue.rs: replace path_is_nonzero_signed -> bool with false
src/fnvalue.rs: replace path_is_nonzero_unsigned -> bool with true
src/fnvalue.rs: replace path_is_nonzero_unsigned -> bool with false
src/fnvalue.rs: replace match_first_type_arg -> Option<&'p Type> with None
src/fnvalue.rs: replace match_first_type_arg -> Option<&'p Type> with Some(&Default::default())
src/in_diff.rs: replace diff_filter -> Result<Vec<Mutant>> with Ok(vec![])
src/in_diff.rs: replace diff_filter -> Result<Vec<Mutant>> with Ok(vec![Default::default()])
src/in_diff.rs: replace diff_filter -> Result<Vec<Mutant>> with Err(::anyhow::anyhow!("mutated!"))
src/in_diff.rs: replace check_diff_new_text_matches -> Result<()> with Ok(())
src/in_diff.rs: replace check_diff_new_text_matches -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/in_diff.rs: replace strip_patch_path -> &Utf8Path with &Default::default()
src/in_diff.rs: replace affected_lines -> Vec<usize> with vec![]
src/in_diff.rs: replace affected_lines -> Vec<usize> with vec![0]
src/in_diff.rs: replace affected_lines -> Vec<usize> with vec![1]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(0, "")]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(0, "xyzzy")]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(1, "")]
src/in_diff.rs: replace partial_new_file -> Vec<(usize, &'d str)> with vec![(1, "xyzzy")]
src/interrupt.rs: replace install_handler with ()
src/lab.rs: replace test_mutants -> Result<LabOutcome> with Ok(Default::default())
src/lab.rs: replace test_mutants -> Result<LabOutcome> with Err(::anyhow::anyhow!("mutated!"))
src/lab.rs: replace test_scenario -> Result<ScenarioOutcome> with Ok(Default::default())
src/lab.rs: replace test_scenario -> Result<ScenarioOutcome> with Err(::anyhow::anyhow!("mutated!"))
src/list.rs: replace <impl Write for FmtToIoWrite<W>>::write_str -> Result<(), fmt::Error> with Ok(())
src/list.rs: replace <impl Write for FmtToIoWrite<W>>::write_str -> Result<(), fmt::Error> with Err(::anyhow::anyhow!("mutated!"))
src/list.rs: replace list_mutants -> Result<()> with Ok(())
src/list.rs: replace list_mutants -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/list.rs: replace list_files -> Result<()> with Ok(())
src/list.rs: replace list_files -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/log_file.rs: replace LogFile::create_in -> Result<LogFile> with Ok(Default::default())
src/log_file.rs: replace LogFile::create_in -> Result<LogFile> with Err(::anyhow::anyhow!("mutated!"))
src/log_file.rs: replace LogFile::open_append -> Result<File> with Ok(Default::default())
src/log_file.rs: replace LogFile::open_append -> Result<File> with Err(::anyhow::anyhow!("mutated!"))
src/log_file.rs: replace LogFile::message with ()
src/log_file.rs: replace LogFile::path -> &Utf8Path with &Default::default()
src/log_file.rs: replace last_line -> Result<String> with Ok(String::new())
src/log_file.rs: replace last_line -> Result<String> with Ok("xyzzy".into())
src/log_file.rs: replace last_line -> Result<String> with Err(::anyhow::anyhow!("mutated!"))
src/log_file.rs: replace clean_filename -> String with String::new()
src/log_file.rs: replace clean_filename -> String with "xyzzy".into()
src/manifest.rs: replace fix_manifest -> Result<()> with Ok(())
src/manifest.rs: replace fix_manifest -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace fix_manifest_toml -> Result<Option<toml::Value>> with Ok(None)
src/manifest.rs: replace fix_manifest_toml -> Result<Option<toml::Value>> with Ok(Some(Default::default()))
src/manifest.rs: replace fix_manifest_toml -> Result<Option<toml::Value>> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace fix_dependency_table with ()
src/manifest.rs: replace fix_cargo_config -> Result<()> with Ok(())
src/manifest.rs: replace fix_cargo_config -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Ok(None)
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Ok(Some(String::new()))
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Ok(Some("xyzzy".into()))
src/manifest.rs: replace fix_cargo_config_toml -> Result<Option<String>> with Err(::anyhow::anyhow!("mutated!"))
src/manifest.rs: replace fix_path -> Option<String> with None
src/manifest.rs: replace fix_path -> Option<String> with Some(String::new())
src/manifest.rs: replace fix_path -> Option<String> with Some("xyzzy".into())
src/mutate.rs: replace Mutant::mutated_code -> String with String::new()
src/mutate.rs: replace Mutant::mutated_code -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::original_code -> &str with ""
src/mutate.rs: replace Mutant::original_code -> &str with "xyzzy"
src/mutate.rs: replace Mutant::return_type -> &str with ""
src/mutate.rs: replace Mutant::return_type -> &str with "xyzzy"
src/mutate.rs: replace Mutant::describe_change -> String with String::new()
src/mutate.rs: replace Mutant::describe_change -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::replacement_text -> &str with ""
src/mutate.rs: replace Mutant::replacement_text -> &str with "xyzzy"
src/mutate.rs: replace Mutant::function_name -> &str with ""
src/mutate.rs: replace Mutant::function_name -> &str with "xyzzy"
src/mutate.rs: replace Mutant::package_name -> &str with ""
src/mutate.rs: replace Mutant::package_name -> &str with "xyzzy"
src/mutate.rs: replace Mutant::package -> &Package with &Default::default()
src/mutate.rs: replace Mutant::diff -> String with String::new()
src/mutate.rs: replace Mutant::diff -> String with "xyzzy".into()
src/mutate.rs: replace Mutant::apply -> Result<()> with Ok(())
src/mutate.rs: replace Mutant::apply -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace Mutant::unapply -> Result<()> with Ok(())
src/mutate.rs: replace Mutant::unapply -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace Mutant::write_in_dir -> Result<()> with Ok(())
src/mutate.rs: replace Mutant::write_in_dir -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace Mutant::log_file_name_base -> String with String::new()
src/mutate.rs: replace Mutant::log_file_name_base -> String with "xyzzy".into()
src/mutate.rs: replace <impl Debug for Mutant>::fmt -> fmt::Result with Ok(Default::default())
src/mutate.rs: replace <impl Debug for Mutant>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace <impl Display for Mutant>::fmt -> fmt::Result with Ok(Default::default())
src/mutate.rs: replace <impl Display for Mutant>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/mutate.rs: replace <impl Serialize for Mutant>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
src/mutate.rs: replace <impl Serialize for Mutant>::serialize -> Result<S::Ok, S::Error> with Err(::anyhow::anyhow!("mutated!"))
src/options.rs: replace join_slices -> Vec<String> with vec![]
src/options.rs: replace join_slices -> Vec<String> with vec![String::new()]
src/options.rs: replace join_slices -> Vec<String> with vec!["xyzzy".into()]
src/options.rs: replace build_glob_set -> Result<Option<GlobSet>> with Ok(None)
src/options.rs: replace build_glob_set -> Result<Option<GlobSet>> with Ok(Some(Default::default()))
src/options.rs: replace build_glob_set -> Result<Option<GlobSet>> with Err(::anyhow::anyhow!("mutated!"))
src/outcome.rs: replace Phase::name -> &'static str with ""
src/outcome.rs: replace Phase::name -> &'static str with "xyzzy"
src/outcome.rs: replace <impl Display for Phase>::fmt -> fmt::Result with Ok(Default::default())
src/outcome.rs: replace <impl Display for Phase>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/outcome.rs: replace LabOutcome::add with ()
src/outcome.rs: replace LabOutcome::exit_code -> i32 with 0
src/outcome.rs: replace LabOutcome::exit_code -> i32 with 1
src/outcome.rs: replace LabOutcome::exit_code -> i32 with -1
src/outcome.rs: replace LabOutcome::summary_string -> String with String::new()
src/outcome.rs: replace LabOutcome::summary_string -> String with "xyzzy".into()
src/outcome.rs: replace <impl Serialize for ScenarioOutcome>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
src/outcome.rs: replace <impl Serialize for ScenarioOutcome>::serialize -> Result<S::Ok, S::Error> with Err(::anyhow::anyhow!("mutated!"))
src/outcome.rs: replace ScenarioOutcome::add_phase_result with ()
src/outcome.rs: replace ScenarioOutcome::get_log_content -> Result<String> with Ok(String::new())
src/outcome.rs: replace ScenarioOutcome::get_log_content -> Result<String> with Ok("xyzzy".into())
src/outcome.rs: replace ScenarioOutcome::get_log_content -> Result<String> with Err(::anyhow::anyhow!("mutated!"))
src/outcome.rs: replace ScenarioOutcome::last_phase -> Phase with Default::default()
src/outcome.rs: replace ScenarioOutcome::last_phase_result -> ProcessStatus with Default::default()
src/outcome.rs: replace ScenarioOutcome::phase_results -> &[PhaseResult] with Vec::leak(Vec::new())
src/outcome.rs: replace ScenarioOutcome::phase_results -> &[PhaseResult] with Vec::leak(vec![Default::default()])
src/outcome.rs: replace ScenarioOutcome::should_show_logs -> bool with true
src/outcome.rs: replace ScenarioOutcome::should_show_logs -> bool with false
src/outcome.rs: replace ScenarioOutcome::success -> bool with true
src/outcome.rs: replace ScenarioOutcome::success -> bool with false
src/outcome.rs: replace ScenarioOutcome::has_timeout -> bool with true
src/outcome.rs: replace ScenarioOutcome::has_timeout -> bool with false
src/outcome.rs: replace ScenarioOutcome::check_or_build_failed -> bool with true
src/outcome.rs: replace ScenarioOutcome::check_or_build_failed -> bool with false
src/outcome.rs: replace ScenarioOutcome::mutant_caught -> bool with true
src/outcome.rs: replace ScenarioOutcome::mutant_caught -> bool with false
src/outcome.rs: replace ScenarioOutcome::mutant_missed -> bool with true
src/outcome.rs: replace ScenarioOutcome::mutant_missed -> bool with false
src/outcome.rs: replace ScenarioOutcome::summary -> SummaryOutcome with Default::default()
src/outcome.rs: replace PhaseResult::is_success -> bool with true
src/outcome.rs: replace PhaseResult::is_success -> bool with false
src/outcome.rs: replace <impl Serialize for PhaseResult>::serialize -> Result<S::Ok, S::Error> with Ok(Default::default())
src/outcome.rs: replace <impl Serialize for PhaseResult>::serialize -> Result<S::Ok, S::Error> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace LockFile::acquire_lock -> Result<File> with Ok(Default::default())
src/output.rs: replace LockFile::acquire_lock -> Result<File> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::create_log -> Result<LogFile> with Ok(Default::default())
src/output.rs: replace OutputDir::create_log -> Result<LogFile> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::path -> &Utf8Path with &Default::default()
src/output.rs: replace OutputDir::write_lab_outcome -> Result<()> with Ok(())
src/output.rs: replace OutputDir::write_lab_outcome -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::add_scenario_outcome -> Result<()> with Ok(())
src/output.rs: replace OutputDir::add_scenario_outcome -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::open_debug_log -> Result<File> with Ok(Default::default())
src/output.rs: replace OutputDir::open_debug_log -> Result<File> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::write_mutants_list -> Result<()> with Ok(())
src/output.rs: replace OutputDir::write_mutants_list -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/output.rs: replace OutputDir::take_lab_outcome -> LabOutcome with Default::default()
src/path.rs: replace ascent -> isize with 0
src/path.rs: replace ascent -> isize with 1
src/path.rs: replace ascent -> isize with -1
src/path.rs: replace <impl Utf8PathSlashes for Utf8Path>::to_slash_path -> String with String::new()
src/path.rs: replace <impl Utf8PathSlashes for Utf8Path>::to_slash_path -> String with "xyzzy".into()
src/pretty.rs: replace <impl ToPrettyString for T>::to_pretty_string -> String with String::new()
src/pretty.rs: replace <impl ToPrettyString for T>::to_pretty_string -> String with "xyzzy".into()
src/process.rs: replace Process::run -> Result<ProcessStatus> with Ok(Default::default())
src/process.rs: replace Process::run -> Result<ProcessStatus> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace Process::start -> Result<Process> with Ok(Default::default())
src/process.rs: replace Process::start -> Result<Process> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace Process::terminate -> Result<()> with Ok(())
src/process.rs: replace Process::terminate -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace terminate_child_impl -> Result<()> with Ok(())
src/process.rs: replace terminate_child_impl -> Result<()> with Err(::anyhow::anyhow!("mutated!"))
src/process.rs: replace ProcessStatus::success -> bool with true
src/process.rs: replace ProcessStatus::success -> bool with false
src/process.rs: replace ProcessStatus::timeout -> bool with true
src/process.rs: replace ProcessStatus::timeout -> bool with false
src/process.rs: replace setpgid_on_unix -> PopenConfig with Default::default()
src/process.rs: replace get_command_output -> Result<String> with Ok(String::new())
src/process.rs: replace get_command_output -> Result<String> with Ok("xyzzy".into())
src/process.rs: replace get_command_output -> Result<String> with Err(::anyhow::anyhow!("mutated!"))
src/scenario.rs: replace <impl Display for Scenario>::fmt -> fmt::Result with Ok(Default::default())
src/scenario.rs: replace <impl Display for Scenario>::fmt -> fmt::Result with Err(::anyhow::anyhow!("mutated!"))
src/scenario.rs: replace Scenario::is_mutant -> bool with true
src/scenario.rs: replace Scenario::is_mutant -> bool with false
src/scenario.rs: replace Scenario::log_file_name_base -> String with String::new()
src/scenario.rs: replace Scenario::log_file_name_base -> String with "xyzzy".into()
src/source.rs: replace SourceFile::tree_relative_slashes -> String with String::new()
src/source.rs: replace SourceFile::tree_relative_slashes -> String with "xyzzy".into()
src/source.rs: replace SourceFile::path -> &Utf8Path with &Default::default()
src/textedit.rs: replace <impl From for LineColumn>::from -> Self with Default::default()
src/textedit.rs: replace <impl From for Span>::from -> Self with Default::default()
src/textedit.rs: replace <impl From for Span>::from -> Self with Default::default()
src/textedit.rs: replace replace_region -> String with String::new()
src/textedit.rs: replace replace_region -> String with "xyzzy".into()
src/visit.rs: replace walk_tree -> Result<Discovered> with Ok(Default::default())
src/visit.rs: replace walk_tree -> Result<Discovered> with Err(::anyhow::anyhow!("mutated!"))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![], vec![]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![], vec![String::new()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![], vec!["xyzzy".into()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![Default::default()], vec![]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![Default::default()], vec![String::new()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Ok((vec![Default::default()], vec!["xyzzy".into()]))
src/visit.rs: replace walk_file -> Result<(Vec<Mutant>, Vec<String>)> with Err(::anyhow::anyhow!("mutated!"))
src/visit.rs: replace DiscoveryVisitor<'o>::collect_fn_mutants with ()
src/visit.rs: replace DiscoveryVisitor<'o>::in_namespace -> T with Default::default()
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_item_fn with ()
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_impl_item_fn with ()
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_item_impl with ()
src/visit.rs: replace <impl Visit for DiscoveryVisitor<'_>>::visit_item_mod with ()
src/visit.rs: replace find_mod_source -> Result<Option<Utf8PathBuf>> with Ok(None)
src/visit.rs: replace find_mod_source -> Result<Option<Utf8PathBuf>> with Ok(Some(Default::default()))
src/visit.rs: replace find_mod_source -> Result<Option<Utf8PathBuf>> with Err(::anyhow::anyhow!("mutated!"))
src/visit.rs: replace fn_sig_excluded -> bool with true
src/visit.rs: replace fn_sig_excluded -> bool with false
src/visit.rs: replace attrs_excluded -> bool with true
src/visit.rs: replace attrs_excluded -> bool with false
src/visit.rs: replace block_is_empty -> bool with true
src/visit.rs: replace block_is_empty -> bool with false
src/visit.rs: replace attr_is_cfg_test -> bool with true
src/visit.rs: replace attr_is_cfg_test -> bool with false
src/visit.rs: replace attr_is_test -> bool with true
src/visit.rs: replace attr_is_test -> bool with false
src/visit.rs: replace path_is -> bool with true
src/visit.rs: replace path_is -> bool with false
src/visit.rs: replace attr_is_mutants_skip -> bool with true
src/visit.rs: replace attr_is_mutants_skip -> bool with false
src/workspace.rs: replace PackageFilter::explicit -> PackageFilter with Default::default()
src/workspace.rs: replace PackageFilter::resolve_auto -> Result<PackageFilter> with Ok(Default::default())
src/workspace.rs: replace PackageFilter::resolve_auto -> Result<PackageFilter> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::open -> Result<Self> with Ok(Default::default())
src/workspace.rs: replace Workspace::open -> Result<Self> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::packages -> Result<Vec<Arc<Package>>> with Ok(vec![])
src/workspace.rs: replace Workspace::packages -> Result<Vec<Arc<Package>>> with Ok(vec![Arc::new(Default::default())])
src/workspace.rs: replace Workspace::packages -> Result<Vec<Arc<Package>>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::package_tops -> Result<Vec<PackageTop>> with Ok(vec![])
src/workspace.rs: replace Workspace::package_tops -> Result<Vec<PackageTop>> with Ok(vec![Default::default()])
src/workspace.rs: replace Workspace::package_tops -> Result<Vec<PackageTop>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::top_sources -> Result<Vec<Arc<SourceFile>>> with Ok(vec![])
src/workspace.rs: replace Workspace::top_sources -> Result<Vec<Arc<SourceFile>>> with Ok(vec![Arc::new(Default::default())])
src/workspace.rs: replace Workspace::top_sources -> Result<Vec<Arc<SourceFile>>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::discover -> Result<Discovered> with Ok(Default::default())
src/workspace.rs: replace Workspace::discover -> Result<Discovered> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace Workspace::mutants -> Result<Vec<Mutant>> with Ok(vec![])
src/workspace.rs: replace Workspace::mutants -> Result<Vec<Mutant>> with Ok(vec![Default::default()])
src/workspace.rs: replace Workspace::mutants -> Result<Vec<Mutant>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace direct_package_sources -> Result<Vec<Utf8PathBuf>> with Ok(vec![])
src/workspace.rs: replace direct_package_sources -> Result<Vec<Utf8PathBuf>> with Ok(vec![Default::default()])
src/workspace.rs: replace direct_package_sources -> Result<Vec<Utf8PathBuf>> with Err(::anyhow::anyhow!("mutated!"))
src/workspace.rs: replace should_mutate_target -> bool with true
src/workspace.rs: replace should_mutate_target -> bool with false
src/workspace.rs: replace locate_project -> Result<Utf8PathBuf> with Ok(Default::default())
src/workspace.rs: replace locate_project -> Result<Utf8PathBuf> with Err(::anyhow::anyhow!("mutated!"))

